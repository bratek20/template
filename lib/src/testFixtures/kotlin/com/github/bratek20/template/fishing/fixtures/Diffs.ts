// DO NOT EDIT! Autogenerated by HLA tool

namespace Fishing {
    export function diffFishId(given: FishId, expected: string, path: string = ""): string {
        if (given.value != expected) { return `${path}value ${given.value} != ${expected}` }
        return ""
    }

    export interface ExpectedCaughtFish {
        id?: string,
        name?: string,
        points?: number,
    }
    export function diffCaughtFish(given: CaughtFish, expected: ExpectedCaughtFish, path: string = ""): string {
        const result: string[] = []

        if (expected.id !== undefined) {
            if (diffFishId(given.getId(), expected.id) != "") { result.push(diffFishId(given.getId(), expected.id, `${path}id.`)) }
        }

        if (expected.name !== undefined) {
            if (given.getName() != expected.name) { result.push(`${path}name ${given.getName()} != ${expected.name}`) }
        }

        if (expected.points !== undefined) {
            if (given.getPoints() != expected.points) { result.push(`${path}points ${given.getPoints()} != ${expected.points}`) }
        }

        return result.join("\n")
    }

    export interface ExpectedLure {
        fishId?: string,
    }
    export function diffLure(given: Lure, expected: ExpectedLure, path: string = ""): string {
        const result: string[] = []

        if (expected.fishId !== undefined) {
            if (diffFishId(given.getFishId(), expected.fishId) != "") { result.push(diffFishId(given.getFishId(), expected.fishId, `${path}fishId.`)) }
        }

        return result.join("\n")
    }

    export interface ExpectedFishContent {
        id?: string,
        name?: string,
        minPoints?: number,
        maxPoints?: number,
    }
    export function diffFishContent(given: FishContent, expected: ExpectedFishContent, path: string = ""): string {
        const result: string[] = []

        if (expected.id !== undefined) {
            if (diffFishId(given.getId(), expected.id) != "") { result.push(diffFishId(given.getId(), expected.id, `${path}id.`)) }
        }

        if (expected.name !== undefined) {
            if (given.getName() != expected.name) { result.push(`${path}name ${given.getName()} != ${expected.name}`) }
        }

        if (expected.minPoints !== undefined) {
            if (given.getMinPoints() != expected.minPoints) { result.push(`${path}minPoints ${given.getMinPoints()} != ${expected.minPoints}`) }
        }

        if (expected.maxPoints !== undefined) {
            if (given.getMaxPoints() != expected.maxPoints) { result.push(`${path}maxPoints ${given.getMaxPoints()} != ${expected.maxPoints}`) }
        }

        return result.join("\n")
    }

    export interface ExpectedFishery {
        fishes?: ExpectedFishContent[],
    }
    export function diffFishery(given: Fishery, expected: ExpectedFishery, path: string = ""): string {
        const result: string[] = []

        if (expected.fishes !== undefined) {
            if (given.getFishes().length != expected.fishes.length) { result.push(`${path}fishes size ${given.getFishes().length} != ${expected.fishes.length}`) }
            given.getFishes().forEach((entry, idx) => { if (diffFishContent(entry, expected.fishes[idx]) != "") { result.push(diffFishContent(entry, expected.fishes[idx], `${path}fishes[${idx}].`)) } })
        }

        return result.join("\n")
    }
}